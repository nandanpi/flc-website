generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model account {
  id                String  @id @unique(map: "Account_id_key")
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              user    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId], map: "Account_provider_providerAccountId_key")
  @@index([userId], map: "Account_userId_idx")
}

model certificate {
  id      String           @id @unique(map: "Certificate_id_key")
  userId  String
  date    DateTime         @default(now())
  type    certificate_type
  eventId Int
  desc    String?          @db.Text

  @@index([eventId], map: "Certificate_eventId_idx")
  @@index([userId], map: "Certificate_userId_idx")
}

model core {
  id       Int         @id @unique(map: "Core_id_key") @default(autoincrement())
  name     String
  role     core_role
  img      String
  github   String?
  linkedin String?
  filter   core_filter
}

model event {
  id          Int          @id @unique(map: "Event_id_key") @default(autoincrement())
  name        String
  date        DateTime
  attended    Int
  type        event_type
  organizer   String
  description String       @db.Text
  filter      event_filter
  images      Json?
  amount      Int?         @default(0)
  isAvailable Boolean      @default(true)
}

model eventparticipant {
  eventId Int
  userId  String

  @@id([userId, eventId])
  @@unique([userId, eventId], map: "EventParticipant_userId_eventId_key")
  @@index([eventId], map: "EventParticipant_eventId_idx")
  @@index([userId], map: "EventParticipant_userId_idx")
}

model members {
  my_row_id BigInt  @id @db.UnsignedBigInt
  email     String  @unique(map: "Members_email_key")
  name      String?
  batch     Int?
}

model registrationpayment {
  id          Int      @id @unique(map: "RegistrationPayment_id_key") @default(autoincrement())
  userId      String
  orderId     String   @unique(map: "RegistrationPayment_orderId_key")
  amount      Float
  paid        Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  paymentData Json?
}

model registrations {
  id           Int    @id @unique(map: "Registrations_id_key") @default(autoincrement())
  languages    Json
  skills       Json
  whyJoin      String @db.Text
  expectations String @db.Text
  yearOfReg    Int
  userId       String @unique(map: "Registrations_userId_key")
  user         user   @relation(fields: [userId], references: [id])

  @@index([userId], map: "Registrations_userId_idx")
}

model session {
  id           String   @id @unique(map: "Session_id_key")
  sessionToken String   @unique(map: "Session_sessionToken_key")
  userId       String
  expires      DateTime

  @@index([userId], map: "Session_userId_idx")
}

model task {
  id          Int      @id @unique(map: "Task_id_key") @default(autoincrement())
  name        String
  description String
  completed   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  teamId      Int

  @@index([teamId], map: "Task_teamId_idx")
}

model team {
  id          Int    @id @unique(map: "Team_id_key") @default(autoincrement())
  name        String @unique(map: "Team_name_key")
  description String
}

model user {
  id            String          @id @unique(map: "User_id_key")
  name          String?
  email         String?         @unique(map: "User_email_key")
  emailVerified DateTime?
  image         String?
  role          String?         @default("user")
  bio           String?         @db.Text
  links         String?         @db.Text
  isMember      Boolean         @default(false)
  isAdmin       Boolean         @default(false)
  teamId        Int?
  username      String?         @unique(map: "User_username_key")
  branch        String?
  phone         String?
  year          Int?
  account       account[]
  registrations registrations[]

  @@index([teamId], map: "User_teamId_idx")
}

model verificationtoken {
  my_row_id  BigInt   @id @db.UnsignedBigInt
  identifier String
  token      String   @unique(map: "VerificationToken_token_key")
  expires    DateTime

  @@unique([identifier, token], map: "VerificationToken_identifier_token_key")
}

model websitesettings {
  id               Int     @id @unique(map: "WebsiteSettings_id_key") @default(autoincrement())
  registrationOpen Boolean @default(true)
}

enum core_role {
  Principal
  AssistantProfessor
  Mentor
  President
  VicePresident
  Secretary
  JointSecretary
  Treasurer
  DocumentationHead
  PublicityHead
  EventsHead
  EventsCoHead
  TalentAcquisitionHead
  TechnicalHead
  DigitalTechLead
  EthicalHackingHead
  ProgramAdvisor
  ProgramLead
  GraphicsHead
  GraphicsCoHead
  SocialMediaHead
  SocialMediaCoHead
  ContentHead
  ContentCoHead
  GraphicsTeam
  CompetitiveProgrammingLead
  SocialMediaTeam
  ContentTeam
  TechnicalContentHead
  TechnicalTeam
  CoreMember
  OperationsManager
  LeadDeveloper
  FrontendLead
  BackendLead
  CPAdvisors
  CPTeamMember
  AppDomainHead
  AIMLDomainHead
  EventLead
  Photographer
  Videographer
}

enum certificate_type {
  TeamParticipation
  SoloParticipation
  Winner
  RunnerUp
  SpecialRecognition
}

enum event_type {
  Workshop
  Seminar
  Gaming
  Talk
  CyberSecurity
  OpenSource
  AndroidDevelopment
  WebDevelopment
  Hackathon
  CodingContest
}

enum core_filter {
  Year2017to2020
  Year2020to2021
  Year2021to2022
  Year2022to2023
  Year2023to2024
  Faculty
}

enum event_filter {
  Year2017to2020
  Year2020to2021
  Year2021to2022
  Year2022to2023
  Year2023to2024
}
